h3("Head of the Dataset"), # HTML
tableOutput("view"), # Table View
h3("Dataset Summary"), # HTML
verbatimTextOutput("summary") # Output Asis
)
)
)
)
library("msos")
data("Spam")
server = shinyServer(function(input, output) {
active_dataset = reactive({ # Reactive
subset(mtcars, ind == input$independent, dep == input$dependent)
}) # close: reactive()
output$summary = renderPrint({ # Summary Render
lm(as.formula(paste(input$dependent, "~", input$independent)))
}) # close: renderPrint()
output$graph = renderPlot({
ggplot(active_dataset()) +
geom_point(size=4, aes(x=Wins, y=Total_attendance, color=Revenue)) +
scale_color_gradient(low="red", high="black") +
xlab("Wins") + ylab("Attendance") +
ggtitle("Wins vs. Attendance")
}) # close: renderPrint()
}) # close: shinyServer()
# Launch the App
shinyApp(ui = ui, server = server)
knitr::opts_chunk$set(echo = TRUE)
predict(fit)
plot(ArmLength~BenchPress, data = nfl, xlab = "Bench Press", ylab = "Arm Length")
nfl = read.csv("nfl_combine2017.csv")
correl = cor(nfl$ArmLength, nfl$BenchPress, use="complete.obs")
correl
fit2 = lm(BenchPress ~ I(ArmLength - 32), data = nfl)
fit2
plot(ArmLength~BenchPress, data = nfl, xlab = "Bench Press", ylab = "Arm Length")
fit = lm(ArmLength ~ BenchPress, data = nfl)
fit
abline(fit, lwd = 2, col = "red")
predict(fit)
predict(fit, data.frame(ArmLength = 30))
predict(fit, data.frame(BenchPress = 30))
predict(fit, data.frame(ArmLength = 30))
predict(fit, data.frame(ArmLength = 30))
plot(ArmLength~BenchPress, data = nfl, xlab = "Bench Press", ylab = "Arm Length")
fit = lm(BenchPress ~ArmLength , data = nfl)
fit
abline(fit, lwd = 2, col = "red")
predict(fit, data.frame(ArmLength = 30))
plot(BenchPress ~ ArmLength, data = nfl, xlab = "Bench Press", ylab = "Arm Length")
fit = lm(BenchPress ~ArmLength , data = nfl)
fit
abline(fit, lwd = 2, col = "red")
plot(BenchPress ~ ArmLength, data = nfl, xlab = "Arm Length", ylab = "Bench Press")
fit = lm(BenchPress ~ArmLength , data = nfl)
fit
abline(fit, lwd = 2, col = "red")
y=c(62.3,51.5,60,74.3,60.6,84.7,70);
x=c(1,12.3,25.3,36.8,50,60.4,73.5)
lm(x ~ y)
lm(y~x)
y[3]
y[5]
lm(I(y-y[3] ~ x))
lm(I(y-y[5] ~ x))
lm(I(y-y[5]) ~ x))
lm(I(y - y[5]) ~ x)
lm(I(y - y[3]) ~ x)
y[5]
lm(x ~ I(y - y[3]))
lm(x ~ I(y - y[5]))
fitted(y ~ x)
fitted(y, x)
names(y ~ x)
test = data.frame(x, y)
test$resid(1, 6)
names(test)
test = lm(y ~ x)
names(test)
test$residuals
sum(test$residuals)
test$residuals[8]
test$residuals[7]
test$residuals[1]+test$residuals[2]+test$residuals[3]+test$residuals[4]+test$residuals[5]+test$residuals[6]+test$residuals[7]
apply(test, 2, sd)
apply(test, 1, sd)
sd(test)
test
x=c(1,1.2,1.4,1.6,1.8,2)
y=c(3.9,7.7,6.3,9.7,8.3,11)
lm(y ~ x)
lm(x ~ y)
x
y
lm(y ~ x)
lm(x ~ y)
xnew = (1,1.2,1.4,1.6,1.8,2)
xnew = c(1,1.2,1.4,1.6,1.8,2)
ynew =c(3.9,7.7,6.3,9.7,8.3,11)
lm(ynew ~ xnew)
knitr::opts_chunk$set(echo = TRUE)
shotputt = read.csv("shotputt_powerclean.csv")
t.test(shotputt$shot.putt, shotputt$power.clean, conf.level = 0.05)
fit = lm(shot.putt ~ power.clean, data = shotputt)
ci = confint(fit, level = 0.95)
ci
predict(fit, data.frame(power.clean = 100), level = 0.95, interval = "confidence")
predict(fit, data.frame(power.clean = 100), level = 0.95, interval = "prediction")
triplevertical = read.csv("triple_vertical.csv")
t.test(triplevertical$triple, triplevertical$vertical, conf.level = 0.01)
fit = lm(triple ~ vertical, data = triplevertical)
ci = confint(fit, level = 0.99, parm = 2)
ci
predict(fit, data.frame(vertical = 40), level = 0.99, interval = "confidence")
predict(fit, data.frame(vertical = 40), level = 0.99, interval = "prediction")
shotputt = read.csv("shotputt_powerclean.csv")
fit = lm(shot.putt ~ power.clean, data = shotputt)
null1 = lm(shot.putt ~ 1, data = shotputt)
shotputt = read.csv("shotputt_powerclean.csv")
fit = lm(shot.putt ~ power.clean, data = shotputt)
null1 = lm(shot.putt ~ 1, data = shotputt)
anova(null1, fit)
out = summary(fit)
out$r.squared
plot(shot.putt ~ powerclean, data = shotputt)
plot(shot.putt ~ power.clean, data = shotputt)
plot(shot.putt ~ power.clean, data = shotputt)
abline(fit, lwd = 2, color = "red")
plot(shot.putt ~ power.clean, data = shotputt)
abline(fit, lwd = 2, col = "red")
A = matrix(rnorm(3 * 2), nrow = 2, ncol = 3)
A[1,]
A{0}
A[0]
A[0,]
A[-1,]
A
A[-2.]
A[-3,]
A[-4,]
A[-5,]
apply(A, 1, sum)
A
winner.url = "http://www.state.ufl.edu/~winner/data"
tmp.url = paste0(winner.url, "immwork.dat")
st = c(1, 30, 38, 46, 54)
en = c(25, 34, 42, 50, 59())
en = c(25, 34, 42, 50, 59)
wds = diff(c(st, en[length(en)]))
wds
wagedat = read.fwf(tmp.url, widths = wds, strip.white = T)
winner.url = "http://www.state.ufl.edu/~winner/data/"
tmp.url = paste0(winner.url, "immwork.dat")
wagedat = read.fwf(tmp.url, widths = wds, strip.white = T)
winner.url = "http://www.stat.ufl.edu/~winner/data/"
tmp.url = paste0(winner.url, "immwork.dat")
wagedat = read.fwf(tmp.url, widths = wds, strip.white = T)
wagedat
colnames(wagedat) = c("nation", "wage", "english", "literate", "livegt5")
wagedat
print(wagedat[1:5, ], row.names = F)
print(wagedat[1:5, ], row.names = T)
print(wagedat[1:5], row.names = F)
print(wagedat[1:2], row.names = F)
plot(literate ~ wage, data = wagedat)
plot(wage ~ literate, data = wagedat)
x.lab = "% Literate"y.lab = "Average Weekly Wage"plot(wagedat[, "literate"], wagedat[, "wage"], xlab = x.lab,ylab = y.lab)
plot(wagedat[, "literate"], wagedat[, "wage"])
tmp.dir = paste0(tmp.wd, "Geology Paper Data.sav")
tmp.wd
tmp.dir = paste0(tmp.url, "Geology Paper Data.sav")
require(foreign)
map_list = read.spss(tmp.dir)
tmp.dir = paste0(tmp.url, "/Geology Paper Data.sav")
map_list = read.spss(tmp.dir)
tmp.url = paste0(winner.url, "pgalpga2008.dat")
st = c(1,9,24)
en = c(8,16,25)
wds = diff(c(st, en[length(en)]))
golf = read.fwf(tmp.url, widths = wds, strip.white = T)
colnames(golf) = c("distance", "accuracy", "gender")
FM = ifelse(golf[, "gender"] == 1, "F", "M")
plot(golf[, "distance"], golf[, "accuracy"], col = golf[, "gender"] * 2, pch = FM)
install.packages("TwitteR")
install.packages("twitteR")
library(stringr)
library(twitteR)
library(xlsx)
library(plyr)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(stringr)
library(twitteR)
library(plyr)
api_key = "g4CpsX0TYX1bM51TEJIIdyFxB"
api_secret = "EkrejrPc4bZBhaDKT4BP5vhrwexY83YHU0XqAxQjxTZNKX4Ig4"
access_token = "2766685437-HzLMwbPSlrP0b1g0QceM9dvr7kBmMdIHsR0mi3Z"
access_token_secret = "c2VbMwyIjkw1trgudrWs3jRIPsv79AKQ2MszJYdAB87cS"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
searchTwitter('analytics')
getwd()
setwd("/Users/Ajay/Desktop/Political Analysis/2018 Illinois Governor Election Twitter Sentiment Analysis")
neg = scan("negative-words.txt", what="character", comment.char=";")
pos = scan("positive-words.txt", what="character", comment.char=";")
Tweets.text = laply(tweets,function(t)t$getText()) # gets text from Tweets
source('~/.active-rstudio-document', echo=TRUE)
hist(analysis$score)
analysis
View(analysis)
source('~/.active-rstudio-document', echo=TRUE)
View(analysis)
source('~/.active-rstudio-document', echo=TRUE)
print(analysis$text[50])
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(analysis)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(analysis)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
hist(bissAnalysis$score)
library(ggplto)
library(ggplot)
library(ggplot2)
ggplot(bissAnalysis) + geom_bar(aes(x = score), fill = score)
ggplot(bissAnalysis) + geom_bar(aes(x = score))
ggplot(bissAnalysis) + geom_bar(aes(x = score, fill = score))
ggplot(bissAnalysis) + geom_bar(aes(x = score, color = score))
ggplot(bissAnalysis) + geom_bar(aes(x = score, fill = score))
ggplot(bissAnalysis) + geom_bar(aes(x = score, fill = text))
ggplot(bissAnalysis) + geom_histogram(aes(x = score, fill = text))
ggplot(bissAnalysis) + geom_histogram(aes(x = score, fill = score))
ggplot(bissAnalysis) + geom_histogram(aes(x = score, fill = score), binwidth = 5)
ggplot(bissAnalysis) + geom_histogram(aes(x = score, fill = score), binwidth = 1)
ggplot(bissAnalysis) + geom_histogram(aes(x = score, fill = score), binwidth = 0.5)
ggplot(bissAnalysis) + geom_histogram(aes(x = score, fill = score), binwidth = 0.5) + scale_fill_gradient(low = "red", high = "blue")
ggplot(bissAnalysis) + geom_bar(aes(x = score, fill = score), binwidth = 0.5) + scale_fill_gradient(low = "red", high = "blue")
ggplot(bissAnalysis) + geom_histogram(aes(x = score, fill = "blue"), binwidth = 0.5)
ggplot(bissAnalysis) + geom_histogram(aes(x = score, binwidth = 0.5)) + scale_fill_manual(values = "blue")
ggplot(bissAnalysis) + geom_histogram(aes(x = score, binwidth = 0.5)) + scale_fill_manual(values = c("blue"))
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(binwidth = 0.5)
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(binwidth = 1)
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(binwidth = 0.5, color = "blue")
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(binwidth = 0.5, fill = "blue")
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(binwidth = 0.5, fill = score)
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(binwidth = 0.5, fill = bissAnalysis$score)
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(binwidth = 0.5, fill = blue)
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(binwidth = 0.5, fill = "blue")
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(binwidth = 0.7, fill = "blue")
ggplot(bissAnalysis, aes(x = score)) + geom_bar(fill = "blue")
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(fill = "blue")
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(fill = "blue", binwidth = 0.6)
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(fill = "blue", binwidth = 0.5)
pritzkerTweets = searchTwitter('Pritzker', n = 10000)
pritzkerTweets.text = laply(pritzkerTweets,function(t)t$getText()) # gets text from Tweets
pritzkerAnalysis = score.sentiment(pritzkerTweets.text, pos, neg) # calls sentiment function
View(pritzkerAnalysis)
pritzkerTweets = searchTwitter('JB Pritzker', n = 10000)
pritzkerTweets.text = laply(pritzkerTweets,function(t)t$getText()) # gets text from Tweets
pritzkerAnalysis = score.sentiment(pritzkerTweets.text, pos, neg) # calls sentiment function
pritzkerTweets = searchTwitter('JB Pritzker', n = 796)
pritzkerTweets.text = laply(pritzkerTweets,function(t)t$getText()) # gets text from Tweets
pritzkerAnalysis = score.sentiment(pritzkerTweets.text, pos, neg) # calls sentiment function
ggplot(pritzkerAnalysis, aes(x = score)) + geom_histogram(fill = "blue", binwidth = 0.5)
View(bissAnalysis)
kennedyTweets = searchTwitter('Chris Kennedy', n = 7960)
kennedyTweets.text = laply(kennedyTweets,function(t)t$getText()) # gets text from Tweets
kennedyAnalysis = score.sentiment(kennedyTweets.text, pos, neg) # calls sentiment function
View(kennedyAnalysis)
ggplot(kennedyAnalysis, aes(x = score)) + geom_histogram(fill = "blue", binwidth = 0.5)
daiberTweets = searchTwitter('Bob Daiber', n = 1419)
daiberTweets.text = laply(daiberTweets,function(t)t$getText()) # gets text from Tweets
daiberAnalysis = score.sentiment(daiberTweets.text, pos, neg) # calls sentiment function
daiberTweets = searchTwitter('Bob Daiber', n = 65)
daiberTweets.text = laply(daiberTweets,function(t)t$getText()) # gets text from Tweets
daiberAnalysis = score.sentiment(daiberTweets.text, pos, neg) # calls sentiment function
View(daiberAnalysis)
ggplot(daiberAnalysis, aes(x = score)) + geom_histogram(fill = "blue", binwidth = 0.5)
raunerTweets = searchTwitter('Bruce Rauner', n = 6500)
raunerTweets.text = laply(raunerTweets,function(t)t$getText()) # gets text from Tweets
raunerAnalysis = score.sentiment(raunerTweets.text, pos, neg) # calls sentiment function
ggplot(raunerAnalysis, aes(x = score)) + geom_histogram(fill = "red", binwidth = 0.5)
ivesTweets = searchTwitter('Jeanne Ives', n = 2500)
ivesTweets.Text = laply(ivesTweets,function(t)t$getText()) # gets text from Tweets
ivesAnalysis = score.sentiment(ivesTweets.Text, pos, neg) # calls sentiment function
ggplot(ivesAnalysis, aes(x = score)) + geom_histogram(fill = "red", binwidth = 0.5)
View(ivesAnalysis)
ivesTweets = searchTwitter('Jeanne Ives', n = 25000)
ivesTweets.Text = laply(ivesTweets,function(t)t$getText()) # gets text from Tweets
ivesAnalysis = score.sentiment(ivesTweets.Text, pos, neg) # calls sentiment function
ggplot(ivesAnalysis, aes(x = score)) + geom_histogram(fill = "red", binwidth = 0.5)
sum(ivesAnalysis$score > 0)
sum(bissAnalysis$score > 0)
sum(pritzkerAnalysis$score > 0)
sum(bissAnalysis$score > 0) / length(bissAnalysis)
length(bissAnalysis)
sum(bissAnalysis$score > 0) / length(bissAnalysis$score)
sum(pritzkerAnalysis$score > 0) / length(pritzkerAnalysis$score)
sum(ivesAnalysis$score > 0) / length(ivesAnalysis$score)
sum(kennedyAnalysis$score > 0) / length(kennedyAnalysis$score)
summary(bissAnalysis)
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(fill = "blue", binwidth = 0.5) + xlab("Sentiment Score ")
summary(bissAnalysis$score)
summary(ivesAnalysis$score)
summary(raunerAnalysis$score)
raunerTweets = searchTwitter('Rauner', n = 2500)
raunerTweets = searchTwitter('Rauner', n = 25000)
raunerTweets.text = laply(raunerTweets,function(t)t$getText()) # gets text from Tweets
raunerAnalysis = score.sentiment(raunerTweets.text, pos, neg) # calls sentiment function
summary(raunerAnalysis$score)
View(raunerAnalysis)
bissTweets = searchTwitter('Biss', n = 25000)
bissTweets = searchTwitter('Biss', n = 25000)
bissTweets = searchTwitter('Biss', n = 25000)
bissTweets = searchTwitter('Biss', n = 25000)
bissTweets = searchTwitter('Biss', n = 25000)
bissTweets = searchTwitter('Biss', n = 25000)
bissTweets = searchTwitter('Biss', n = 25)
bissTweets = searchTwitter('Biss', n = 2500)
bissTweets.text = laply(bissTweets,function(t)t$getText()) # gets text from Tweets
bissAnalysis = score.sentiment(bissTweets.text, pos, neg) # calls sentiment function
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(fill = "blue", binwidth = 0.5) + xlab("Sentiment Score ")
summary(bissAnalysis$score)
View(bissAnalysis)
View(bissAnalysis)
api_key = "g4CpsX0TYX1bM51TEJIIdyFxB"
api_secret = "EkrejrPc4bZBhaDKT4BP5vhrwexY83YHU0XqAxQjxTZNKX4Ig4"
access_token = "2766685437-HzLMwbPSlrP0b1g0QceM9dvr7kBmMdIHsR0mi3Z"
access_token_secret = "c2VbMwyIjkw1trgudrWs3jRIPsv79AKQ2MszJYdAB87cS"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
neg = scan("negative-words.txt", what="character", comment.char=";")
pos = scan("positive-words.txt", what="character", comment.char=";")
score.sentiment = function(tweets, pos.words, neg.words)
{
require(plyr)
require(stringr)
scores = laply(tweets, function(tweet, pos.words, neg.words) {
tweet = gsub('https://','',tweet) # removes https://
tweet = gsub('http://','',tweet) # removes http://
tweet=gsub('[^[:graph:]]', ' ',tweet) ## removes graphic characters
tweet = gsub("[^\x01-\x7F]+", ' ', tweet)
#like emoticons
tweet = gsub('[[:punct:]]', '', tweet) # removes punctuation
tweet = gsub('[[:cntrl:]]', '', tweet) # removes control characters
tweet = gsub('\\d+', '', tweet) # removes numbers
tweet=str_replace_all(tweet,"[^[:graph:]]", " ")
tweet = tolower(tweet) # makes all letters lowercase
word.list = str_split(tweet, '\\s+') # splits the tweets by word in a list
words = unlist(word.list) # turns the list into vector
pos.matches = match(words, pos.words) ## returns matching
#values for words from list
neg.matches = match(words, neg.words)
pos.matches = !is.na(pos.matches) ## converts matching values to true of false
neg.matches = !is.na(neg.matches)
score = sum(pos.matches) - sum(neg.matches) # true and false are
#treated as 1 and 0 so they can be added
return(score)
}, pos.words, neg.words )
scores.df = data.frame(score=scores, text=tweets)
return(scores.df)
}
bissTweets = searchTwitter('Biss', n = 2500)
bissTweets.text = laply(bissTweets,function(t)t$getText()) # gets text from Tweets
bissAnalysis = score.sentiment(bissTweets.text, pos, neg) # calls sentiment function
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(fill = "blue", binwidth = 0.5) + xlab("Sentiment Score ")
summary(bissAnalysis$score)
View(bissAnalysis)
api_key = "g4CpsX0TYX1bM51TEJIIdyFxB"
api_secret = "EkrejrPc4bZBhaDKT4BP5vhrwexY83YHU0XqAxQjxTZNKX4Ig4"
access_token = "2766685437-HzLMwbPSlrP0b1g0QceM9dvr7kBmMdIHsR0mi3Z"
access_token_secret = "c2VbMwyIjkw1trgudrWs3jRIPsv79AKQ2MszJYdAB87cS"
setup_twitter_oauth(api_key,api_secret,access_token,access_token_secret)
neg = scan("negative-words.txt", what="character", comment.char=";")
pos = scan("positive-words.txt", what="character", comment.char=";")
score.sentiment = function(tweets, pos.words, neg.words)
{
require(plyr)
require(stringr)
scores = laply(tweets, function(tweet, pos.words, neg.words) {
tweet = gsub('https://','',tweet) # removes https://
tweet = gsub('http://','',tweet) # removes http://
tweet=gsub('[^[:graph:]]', ' ',tweet) ## removes graphic characters
#like emoticons
tweet = gsub('[[:punct:]]', '', tweet) # removes punctuation
tweet = gsub('[[:cntrl:]]', '', tweet) # removes control characters
tweet = gsub('\\d+', '', tweet) # removes numbers
tweet = gsub("[^[:alnum:]]", "", tweet)
tweet=str_replace_all(tweet,"[^[:graph:]]", " ")
tweet = tolower(tweet) # makes all letters lowercase
word.list = str_split(tweet, '\\s+') # splits the tweets by word in a list
words = unlist(word.list) # turns the list into vector
pos.matches = match(words, pos.words) ## returns matching
#values for words from list
neg.matches = match(words, neg.words)
pos.matches = !is.na(pos.matches) ## converts matching values to true of false
neg.matches = !is.na(neg.matches)
score = sum(pos.matches) - sum(neg.matches) # true and false are
#treated as 1 and 0 so they can be added
return(score)
}, pos.words, neg.words )
scores.df = data.frame(score=scores, text=tweets)
return(scores.df)
}
bissTweets = searchTwitter('Biss', n = 2500)
bissTweets.text = laply(bissTweets,function(t)t$getText()) # gets text from Tweets
bissAnalysis = score.sentiment(bissTweets.text, pos, neg) # calls sentiment function
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(fill = "blue", binwidth = 0.5) + xlab("Sentiment Score ")
summary(bissAnalysis$score)
View(bissAnalysis)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(bissAnalysis, aes(x = score)) + geom_histogram(fill = "blue", binwidth = 0.5) + xlab("Sentiment Score for Biss Tweet")
summary(bissAnalysis$score)
ggplot(kennedyAnalysis, aes(x = score)) + geom_histogram(fill = "blue", binwidth = 0.5) + xlab("Sentiment Score for Kennedy Tweets") + ylab("Number of Tweets")
summary(kennedyAnalysis$score)
ggplot(pritzkerAnalysis, aes(x = score)) + geom_histogram(fill = "blue", binwidth = 0.5) + xlab("Sentiment Score for Pritzker Tweets") + ylab("Number of Tweets")
summary(pritzkerAnalysis$score)
ggplot(raunerAnalysis, aes(x = score)) + geom_histogram(fill = "red", binwidth = 0.5) + xlab("Sentiment Score for Rauner Tweets") + ylab("Number of Tweets")
summary(raunerAnalysis$score)
ggplot(ivesAnalysis, aes(x = score)) + geom_histogram(fill = "red", binwidth = 0.5) + xlab("Sentiment Score for Ives Tweets") + ylab("Number of Tweets")
summary(ivesAnalysis$score)
ivesTweets.Text = laply(ivesTweets,function(t)t$getText()) # gets text from Tweets
ivesAnalysis = score.sentiment(ivesTweets.Text, pos, neg) # calls sentiment function
ggplot(ivesAnalysis, aes(x = score)) + geom_histogram(fill = "red", binwidth = 0.5) + xlab("Sentiment Score for Ives Tweets") + ylab("Number of Tweets")
summary(ivesAnalysis$score)
uniqueScore = ivesAnalysis$score[ ! duplicated( texts ) ]
uniqueScore = ivesAnalysis$text[ ! duplicated( ivesAnalysis$text ) ]
length(uniqueScore)
View(uniqueScore)
uniqueScore
ggplot(ivesAnalysis, aes(x = score)) + geom_histogram(fill = "red", binwidth = 0.5) + xlab("Sentiment Score for Ives Tweets") + ylab("Number of Tweets")
ivesAnalysis$text = ivesAnalysis$text[ ! duplicated( ivesAnalysis$text ) ]
summary(ivesAnalysis$score)
ivesAnalysis = ivesAnalysis[!duplicated(ivesAnalysis), ]
summary(ivesAnalysis$score)
ivesAnalysis = ivesAnalysis[!duplicated(ivesAnalysis), ]
ggplot(ivesAnalysis, aes(x = score)) + geom_histogram(fill = "red", binwidth = 0.5) + xlab("Sentiment Score for Ives Tweets") + ylab("Number of Tweets")
summary(ivesAnalysis$score)
length(raunerAnalysis)
raunerAnalysis = raunerAnalysis[!duplicated(raunerAnalysis), ]
length(raunerAnalysis)
ggplot(raunerAnalysis, aes(x = score)) + geom_histogram(fill = "red", binwidth = 0.5) + xlab("Sentiment Score for Rauner Tweets") + ylab("Number of Tweets")
summary(raunerAnalysis$score)
raunerAnalysis = score.sentiment(raunerTweets.text, pos, neg) # calls sentiment function
length(raunerAnalysis$score)
raunerAnalysis = raunerAnalysis[!duplicated(raunerAnalysis), ]
length(raunerAnalysis$score)
ggplot(raunerAnalysis, aes(x = score)) + geom_histogram(fill = "red", binwidth = 0.5) + xlab("Sentiment Score for Rauner Tweets") + ylab("Number of Tweets")
summary(raunerAnalysis$score)
ivesAnalysis = score.sentiment(ivesTweets.Text, pos, neg) # calls sentiment function
ivesAnalysis2 = ivesAnalysis
ivesAnalysis2
View(ivesAnalysis2)
raunerTweets.text = laply(raunerTweets,function(t)t$getText()) # gets text from Tweets
raunerAnalysis = score.sentiment(raunerTweets.text, pos, neg) # calls sentiment function
ggplot(raunerAnalysis, aes(x = score)) + geom_histogram(fill = "red", binwidth = 0.5) + xlab("Sentiment Score for Rauner Tweets") + ylab("Number of Tweets")
summary(raunerAnalysis$score)
pritzkerTweets = searchTwitter('Pritzker', n = 25000)
writeData(ivesAnalysis2, "ives.csv")
write.csv(ivesAnalysis2, "ives.csv")
patriotPete = subset(ivesAnalysis2, grepl("PatriotPete101", ivesAnalysis$text))
View(patriotPete)
redhead = subset(ivesAnalysis2, grepl("redhead4645", ivesAnalysis$text))
View(redhead)
ninamorton = subset(ivesAnalysis2, grepl("NinaMorton", ivesAnalysis$text))
View(ninamorton)
raunerTweets = searchTwitter('Bruce Rauner', n = 25000)
raunerTweets.text = laply(raunerTweets,function(t)t$getText()) # gets text from Tweets
raunerAnalysis = score.sentiment(raunerTweets.text, pos, neg) # calls sentiment function
ggplot(raunerAnalysis, aes(x = score)) + geom_histogram(fill = "red", binwidth = 0.5) + xlab("Sentiment Score for Rauner Tweets") + ylab("Number of Tweets")
summary(raunerAnalysis$score)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Desktop/Political Analysis/2018 Illinois Governor Election Twitter Sentiment Analysis/governors.R', echo=TRUE)
source('~/Desktop/Political Analysis/2018 Illinois Governor Election Twitter Sentiment Analysis/governors.R', echo=TRUE)
source('~/Desktop/Political Analysis/2018 Illinois Governor Election Twitter Sentiment Analysis/governors.R', echo=TRUE)
source('~/Desktop/Political Analysis/2018 Illinois Governor Election Twitter Sentiment Analysis/governors.R', echo=TRUE)
ivesTweets = searchTwitter('Jeanne Ives', n = 10000)
source('~/Desktop/Political Analysis/2018 Illinois Governor Election Twitter Sentiment Analysis/governors.R', echo=TRUE)
View(bissAnalysis)
View(ivesAnalysis)
View(raunerAnalysis)
View(pritzkerAnalysis)
pritzkerTweets = searchTwitter('JB Pritzker', n = 10000)
pritzkerTweets.text = laply(pritzkerTweets,function(t)t$getText()) # gets text from Tweets
pritzkerAnalysis = score.sentiment(pritzkerTweets.text, pos, neg) # calls sentiment function
ggplot(pritzkerAnalysis, aes(x = score)) + geom_histogram(fill = "blue", binwidth = 0.5) + xlab("Sentiment Score for Pritzker Tweets") + ylab("Number of Tweets")
summary(pritzkerAnalysis$score)
View(pritzkerAnalysis)
numberOfTweetsAboutBiss = length(bissAnalysis$text)
print("The number of tweets for Daniel Biss is: " + numberOfTweetsAboutBiss)
numberOfTweetsAboutBiss = length(bissAnalysis$text)
print("The number of tweets for Daniel Biss is: " + as.character(numberOfTweetsAboutBiss))
print('The number of tweets mentioning "Daniel Biss" is: ')
print(numberOfTweetsAboutBiss)
print()
print("test")
message('The number of tweets mentioning "Daniel Biss" is: ')
print(paste('The number of tweets mentioning "Daniel Biss" is: ', numberOfTweetsAboutBiss))
cat(paste('The number of tweets mentioning "Daniel Biss" is: ', numberOfTweetsAboutBiss))
ninamorton = subset(ivesAnalysis2, grepl("NinaMorton", ivesAnalysis$text))
redhead = subset(ivesAnalysis2, grepl("redhead4645", ivesAnalysis$text))
summary(bissAnalysis$score)
source('~/Desktop/Political Analysis/2018 Illinois Governor Election Twitter Sentiment Analysis/governors.R', echo=TRUE)
message(paste('The number of tweets mentioning "Jeanne Ives" by redhead4645 is: ', numberOfTweetsAboutIves))
